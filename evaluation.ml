(* 
                         CS 51 Final Project
                         MiniML -- Evaluation
*)

(* This module implements a small untyped ML-like language under
   various operational semantics.
 *)

open Expr ;;
  
(* Exception for evaluator runtime, generated by a runtime error in
   the interpreter *)
exception EvalError of string ;;
  
(* Exception for evaluator runtime, generated by an explicit `raise`
   construct in the object language *)
exception EvalException ;;

(*......................................................................
  Environments and values 
 *)

module type ENV = sig
    (* the type of environments *)
    type env
    (* the type of values stored in environments *)
    type value =
      | Val of expr
      | Closure of (expr * env)
   
    (* empty () -- Returns an empty environment *)
    val empty : unit -> env

    (* close expr env -- Returns a closure for `expr` and its `env` *)
    val close : expr -> env -> value

    (* lookup env varid -- Returns the value in the `env` for the
       `varid`, raising an `Eval_error` if not found *)
    val lookup : env -> varid -> value

    (* extend env varid loc -- Returns a new environment just like
       `env` except that it maps the variable `varid` to the `value`
       stored at `loc`. This allows later changing the value, an
       ability used in the evaluation of `letrec`. To make good on
       this, extending an environment needs to preserve the previous
       bindings in a physical, not just structural, way. *)
    val extend : env -> varid -> value ref -> env

    (* env_to_string env -- Returns a printable string representation
       of environment `env` *)
    val env_to_string : env -> string
                                 
    (* value_to_string ?printenvp value -- Returns a printable string
       representation of a value; the optional flag `printenvp`
       (default: `true`) determines whether to include the environment
       in the string representation when called on a closure *)
    val value_to_string : ?printenvp:bool -> value -> string
  end

module Env : ENV =
  struct
    type env = (varid * value ref) list
     and value =
       | Val of expr
       | Closure of (expr * env)

    let empty () : env = [] ;;

    let close (exp : expr) (env : env) : value =
      Closure(exp, env)

    let lookup (env : env) (varname : varid) : value =
      match (List.assoc_opt varname env) with
      | Some value_ref -> !value_ref
      | None -> raise (EvalError "variable not found")

    let extend (env : env) (varname : varid) (loc : value ref) : env =
      let rec extend_helper (environment : env) =
        match environment with
        | [] -> [(varname, loc)]
        | (var, value_ref) :: tl ->
          if var = varname then (var, loc) :: tl
          else (var, value_ref) :: extend_helper tl in
      extend_helper env ;;

    let rec env_to_string (env : env) : string =
      let rec env_to_string_helper (environment : env) =
        match environment with
        | [] -> ""
        | (var, value_ref) :: tl ->
          if tl = [] then var ^ ": " ^ (value_to_string !value_ref)
          else var ^ ": " ^ (value_to_string !value_ref) ^
          ", " ^ env_to_string_helper tl in
      "{" ^ env_to_string_helper env ^ "}"
    and
    value_to_string ?(printenvp : bool = true) (v : value) : string =
      match v with
      | Val exp -> exp_to_concrete_string exp
      | Closure (exp, env) -> 
        if printenvp then (exp_to_concrete_string exp) ^ "where" ^ env_to_string env
        else exp_to_concrete_string exp ;;
  end
;;

(*......................................................................
  Evaluation functions

  Each of the evaluation functions below evaluates an expression `exp`
  in an environment `env` returning a result of type `value`. We've
  provided an initial implementation for a trivial evaluator, which
  just converts the expression unchanged to a `value` and returns it,
  along with "stub code" for three more evaluators: a substitution
  model evaluator and dynamic and lexical environment model versions.

  Each evaluator is of type `expr -> Env.env -> Env.value` for
  consistency, though some of the evaluators don't need an
  environment, and some will only return values that are "bare
  values" (that is, not closures). 

  DO NOT CHANGE THE TYPE SIGNATURES OF THESE FUNCTIONS. Compilation
  against our unit tests relies on their having these signatures. If
  you want to implement an extension whose evaluator has a different
  signature, implement it as `eval_e` below.  *)

(* The TRIVIAL EVALUATOR, which leaves the expression to be evaluated
   essentially unchanged, just converted to a value for consistency
   with the signature of the evaluators. *)
   
let eval_t (exp : expr) (_env : Env.env) : Env.value =
  (* coerce the expr, unchanged, into a value *)
  Env.Val exp ;;

(* The SUBSTITUTION MODEL evaluator -- to be completed *)
   
exception UnboundVariable of string ;;
exception IllFormed of string ;;

let eval_s (exp : expr) (_env : Env.env) : Env.value =

  let binopeval_s (op : binop) (v1 : expr) (v2 : expr) : expr =
    match op, v1, v2 with
    | Plus, Num x1, Num x2 -> Num (x1 + x2)
    | Plus, _, _ -> raise (EvalError "can't add non-integers")
    | Minus, Num x1, Num x2 -> Num (x1 - x2)
    | Minus, _, _ -> raise (EvalError "can't subtract non-integers")
    | Times, Num x1, Num x2 -> Num (x1 * x2) 
    | Times, _, _ -> raise (EvalError "can't multiply non-integers")
    | Equals, Num x1, Num x2 -> Bool (x1 = x2)
    | Equals, Bool x1, Bool x2 -> Bool (x1 = x2)
    | Equals, _, _ -> raise (EvalError "can't compare non-integers or non-booleans") 
    | LessThan, Num x1, Num x2 -> Bool (x1 < x2)
    | LessThan, Bool x1, Bool x2 -> Bool (x1 < x2)
    | LessThan, _, _ -> raise (EvalError "can't compare non-integers or non-booleans") in

  let unopeval_s (op : unop) (e : expr) : expr = 
    match op, e with 
    | Negate, Num x -> Num (~- x)
    | Negate, _ -> raise (EvalError "can't negate non-integers") in
     
  let rec evaluate (exp : expr) : expr =
    match exp with
    | Var x -> raise (UnboundVariable x)
    | Num _ -> exp
    | Bool _ -> exp
    | Unop (op, exp1) -> unopeval_s op (evaluate exp1)
    | Binop (op, exp1, exp2) -> binopeval_s op (evaluate exp1) (evaluate exp2)
    | Conditional (condition, expr1, expr2) -> 
      (match evaluate condition with
      | Bool true -> evaluate expr1
      | Bool false -> evaluate expr2
      | _ -> raise (EvalError "condition must evaluate to bool"))
    | Fun (x, expr) -> Fun (x, expr)
    | Let (x, def, body) -> evaluate (subst x (evaluate def) body) 
    | Letrec (x, def, body) -> 
        let vD = evaluate def in 
        evaluate (subst x (subst x (Letrec (x, vD, Var(x))) vD) body)
    | App (expr1, expr2) -> 
      let f = evaluate expr1 in
      (match f with
      | Fun (x, expr) -> evaluate (subst x (evaluate expr2) expr)
      | _ -> raise (EvalError "didnt input a function"))
    | Raise | Unassigned -> raise (EvalError "syntax error")
    in
  Env.Val (evaluate exp) ;;

(* The DYNAMICALLY-SCOPED ENVIRONMENT MODEL evaluator -- to be
   completed *)

let binopeval_env (op : binop) (v1 : Env.value) (v2 : Env.value) : Env.value =
  match op, v1, v2 with
  | Plus, Val(Num x1), Val(Num x2) -> Val(Num (x1 + x2))
  | Plus, _, _ -> raise (EvalError "can't add non-integers")
  | Minus, Val(Num x1), Val(Num x2) -> Val(Num (x1 - x2))
  | Minus, _, _ -> raise (EvalError "can't subtract non-integers")
  | Times, Val(Num x1), Val(Num x2) -> Val(Num (x1 * x2))
  | Times, _, _ -> raise (EvalError "can't multiply non-integers")
  | Equals, Val(Num x1), Val(Num x2) -> Val(Bool (x1 = x2))
  | Equals, Val(Bool x1), Val(Bool x2) -> Val(Bool (x1 = x2))
  | Equals, _, _ -> raise (EvalError "can't compare non-integers or non-booleans") 
  | LessThan, Val(Num x1), Val(Num x2) -> Val(Bool (x1 < x2))
  | LessThan, Val(Bool x1), Val(Bool x2) -> Val(Bool (x1 < x2))
  | LessThan, _, _ -> raise (EvalError "can't compare non-integers or non-booleans") ;;

let unopeval_env (op : unop) (e : Env.value) : Env.value = 
  match op, e with 
  | Negate, Val(Num x) -> Val(Num (~- x))
  | Negate, _ -> raise (EvalError "can't negate non-integers") ;;

type semantic_type = 
  | Dynamic
  | Lexical

let rec eval_env (exp : expr) (env : Env.env) (semantic_type : semantic_type) : Env.value =
  match exp with
  | Var x -> Env.lookup env x
  | Num i -> Val(Num i)
  | Bool b -> Val(Bool b)
  | Unop (op, expr) -> 
    unopeval_env op (eval_env expr env semantic_type)
  | Binop (op, expr1, expr2) -> 
    binopeval_env op (eval_env expr1 env semantic_type) (eval_env expr2 env semantic_type)
  | Conditional (condition, expr1, expr2) ->
    (match eval_env condition env semantic_type with
    | Val(Bool true) -> eval_env expr1 env semantic_type
    | Val(Bool false) -> eval_env expr2 env semantic_type
    | _ -> raise (EvalError "condition must evaluate to a bool"))
  | Let (x, def, body) -> 
    eval_env body (Env.extend env x (ref (eval_env def env semantic_type))) semantic_type
  | Letrec (x, def, body) ->
    let ref_unassigned = ref (Env.Val (Unassigned)) in
    let modified_environment = Env.extend env x (ref_unassigned) in 
    let evaluated_def = eval_env def modified_environment semantic_type in
    ref_unassigned := evaluated_def;
    eval_env body modified_environment semantic_type
  | Raise -> raise EvalException
  | Unassigned -> raise (EvalError "unassigned")
  | Fun (x, expr) -> 
    (match semantic_type with
    | Dynamic -> Val(Fun(x, expr)) 
    | Lexical -> Env.close exp env)
  | App (funexpr, expr) -> 
    match semantic_type with
    | Dynamic -> 
      (match eval_env funexpr env semantic_type with
      | Env.Val (Fun (varid, fundef)) -> 
        let vQ = eval_env expr env semantic_type in
        eval_env fundef (Env.extend env varid (ref vQ)) semantic_type
      | _ -> raise (EvalError "didn't input a function"))
    | Lexical ->
      (match eval_env funexpr env semantic_type with
      | Env.Closure (Fun (x, lexpr), lexicalenvironment) -> 
        let vQ = eval_env expr env semantic_type in
        eval_env lexpr (Env.extend lexicalenvironment x (ref vQ)) semantic_type
      | _ -> raise (EvalError "didn't input a function")) ;;
   
let eval_d (exp : expr) (env : Env.env) : Env.value =
  eval_env exp env Dynamic ;;
       
(* The LEXICALLY-SCOPED ENVIRONMENT MODEL evaluator -- optionally
   completed as (part of) your extension *)
   
let eval_l (exp : expr) (env : Env.env) : Env.value =
  eval_env exp env Lexical ;;

(* The EXTENDED evaluator -- if you want, you can provide your
   extension as a separate evaluator, or if it is type- and
   correctness-compatible with one of the above, you can incorporate
   your extensions within `eval_s`, `eval_d`, or `eval_l`. *)

let eval_e _ =
  failwith "eval_e not implemented" ;;
  
(* Connecting the evaluators to the external world. The REPL in
   `miniml.ml` uses a call to the single function `evaluate` defined
   here. Initially, `evaluate` is the trivial evaluator `eval_t`. But
   you can define it to use any of the other evaluators as you proceed
   to implement them. (We will directly unit test the four evaluators
   above, not the `evaluate` function, so it doesn't matter how it's
   set when you submit your solution.) *)
   
let evaluate = eval_l ;;
